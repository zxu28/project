{"version":3,"sources":["../../../../src/start/server/DevToolsPluginManager.ts"],"sourcesContent":["import type { ModuleDescriptorDevTools } from 'expo-modules-autolinking/exports';\n\nconst debug = require('debug')('expo:start:server:devtools');\n\nexport const DevToolsPluginEndpoint = '/_expo/plugins';\n\ninterface AutolinkingPlugin {\n  packageName: string;\n  packageRoot: string;\n  webpageRoot: string;\n}\n\nexport interface DevToolsPlugin extends AutolinkingPlugin {\n  webpageEndpoint: string;\n}\n\nexport default class DevToolsPluginManager {\n  private plugins: DevToolsPlugin[] | null = null;\n\n  constructor(private projectRoot: string) {}\n\n  public async queryPluginsAsync(): Promise<DevToolsPlugin[]> {\n    if (this.plugins) {\n      return this.plugins;\n    }\n    const plugins = (await this.queryAutolinkedPluginsAsync(this.projectRoot)).map((plugin) => ({\n      ...plugin,\n      webpageEndpoint: `${DevToolsPluginEndpoint}/${plugin.packageName}`,\n    }));\n    this.plugins = plugins;\n    return this.plugins;\n  }\n\n  public async queryPluginWebpageRootAsync(pluginName: string): Promise<string | null> {\n    const plugins = await this.queryPluginsAsync();\n    const plugin = plugins.find((p) => p.packageName === pluginName);\n    return plugin?.webpageRoot ?? null;\n  }\n\n  private async queryAutolinkedPluginsAsync(projectRoot: string): Promise<AutolinkingPlugin[]> {\n    const autolinking: typeof import('expo/internal/unstable-autolinking-exports') = require('expo/internal/unstable-autolinking-exports');\n    const linker = autolinking.makeCachedDependenciesLinker({ projectRoot });\n    const revisions = await autolinking.scanExpoModuleResolutionsForPlatform(linker, 'devtools');\n    const { resolveModuleAsync } = autolinking.getLinkingImplementationForPlatform('devtools');\n    const plugins: ModuleDescriptorDevTools[] = (\n      await Promise.all(\n        Object.values(revisions).map((revision) => resolveModuleAsync(revision.name, revision))\n      )\n    ).filter((maybePlugin) => maybePlugin != null);\n    debug('Found autolinked plugins', plugins);\n    return plugins;\n  }\n}\n"],"names":["DevToolsPluginEndpoint","DevToolsPluginManager","debug","require","constructor","projectRoot","plugins","queryPluginsAsync","queryAutolinkedPluginsAsync","map","plugin","webpageEndpoint","packageName","queryPluginWebpageRootAsync","pluginName","find","p","webpageRoot","autolinking","linker","makeCachedDependenciesLinker","revisions","scanExpoModuleResolutionsForPlatform","resolveModuleAsync","getLinkingImplementationForPlatform","Promise","all","Object","values","revision","name","filter","maybePlugin"],"mappings":";;;;;;;;;;;IAIaA,sBAAsB;eAAtBA;;IAYb,OAoCC;eApCoBC;;;AAdrB,MAAMC,QAAQC,QAAQ,SAAS;AAExB,MAAMH,yBAAyB;AAYvB,MAAMC;IAGnBG,YAAY,AAAQC,WAAmB,CAAE;aAArBA,cAAAA;aAFZC,UAAmC;IAED;IAE1C,MAAaC,oBAA+C;QAC1D,IAAI,IAAI,CAACD,OAAO,EAAE;YAChB,OAAO,IAAI,CAACA,OAAO;QACrB;QACA,MAAMA,UAAU,AAAC,CAAA,MAAM,IAAI,CAACE,2BAA2B,CAAC,IAAI,CAACH,WAAW,CAAA,EAAGI,GAAG,CAAC,CAACC,SAAY,CAAA;gBAC1F,GAAGA,MAAM;gBACTC,iBAAiB,GAAGX,uBAAuB,CAAC,EAAEU,OAAOE,WAAW,EAAE;YACpE,CAAA;QACA,IAAI,CAACN,OAAO,GAAGA;QACf,OAAO,IAAI,CAACA,OAAO;IACrB;IAEA,MAAaO,4BAA4BC,UAAkB,EAA0B;QACnF,MAAMR,UAAU,MAAM,IAAI,CAACC,iBAAiB;QAC5C,MAAMG,SAASJ,QAAQS,IAAI,CAAC,CAACC,IAAMA,EAAEJ,WAAW,KAAKE;QACrD,OAAOJ,CAAAA,0BAAAA,OAAQO,WAAW,KAAI;IAChC;IAEA,MAAcT,4BAA4BH,WAAmB,EAAgC;QAC3F,MAAMa,cAA2Ef,QAAQ;QACzF,MAAMgB,SAASD,YAAYE,4BAA4B,CAAC;YAAEf;QAAY;QACtE,MAAMgB,YAAY,MAAMH,YAAYI,oCAAoC,CAACH,QAAQ;QACjF,MAAM,EAAEI,kBAAkB,EAAE,GAAGL,YAAYM,mCAAmC,CAAC;QAC/E,MAAMlB,UAAsC,AAC1C,CAAA,MAAMmB,QAAQC,GAAG,CACfC,OAAOC,MAAM,CAACP,WAAWZ,GAAG,CAAC,CAACoB,WAAaN,mBAAmBM,SAASC,IAAI,EAAED,WAC/E,EACAE,MAAM,CAAC,CAACC,cAAgBA,eAAe;QACzC9B,MAAM,4BAA4BI;QAClC,OAAOA;IACT;AACF"}