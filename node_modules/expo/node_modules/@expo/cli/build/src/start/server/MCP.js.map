{"version":3,"sources":["../../../../src/start/server/MCP.ts"],"sourcesContent":["import type {\n  McpServerProxy,\n  TunnelMcpServerProxy as TunnelMcpServerProxyType,\n} from '@expo/mcp-tunnel' with { 'resolution-mode': 'import' };\nimport resolveFrom from 'resolve-from';\n\nimport { getAccessToken, getSession } from '../../api/user/UserSettings';\nimport { Log } from '../../log';\nimport { env } from '../../utils/env';\n\nconst importESM = require('@expo/cli/add-module') as <T>(moduleName: string) => Promise<T>;\n\nconst debug = require('debug')('expo:start:server:mcp') as typeof console.log;\n\n/**\n * Create the MCP server\n */\nexport async function maybeCreateMCPServerAsync(\n  projectRoot: string\n): Promise<McpServerProxy | null> {\n  const mcpServer = env.EXPO_UNSTABLE_MCP_SERVER;\n  if (!mcpServer) {\n    return null;\n  }\n  const mcpPackagePath = resolveFrom.silent(projectRoot, 'expo-mcp');\n  if (!mcpPackagePath) {\n    Log.error(\n      'Missing the `expo-mcp` package in the project. To enable the MCP integration, add the `expo-mcp` package to your project.'\n    );\n    return null;\n  }\n\n  const normalizedServer = /^([a-zA-Z][a-zA-Z\\d+\\-.]*):\\/\\//.test(mcpServer)\n    ? mcpServer\n    : `wss://${mcpServer}`;\n  const mcpServerUrlObject = new URL(normalizedServer);\n  const scheme = mcpServerUrlObject.protocol ?? 'wss:';\n  const mcpServerUrl = `${scheme}//${mcpServerUrlObject.host}`;\n  debug(`Creating MCP tunnel - server URL: ${mcpServerUrl}`);\n\n  try {\n    const { addMcpCapabilities } = await importESM<{\n      addMcpCapabilities: (server: McpServerProxy, projectRoot: string) => void;\n    }>(mcpPackagePath);\n    const { TunnelMcpServerProxy } = await importESM<{\n      TunnelMcpServerProxy: typeof TunnelMcpServerProxyType;\n    }>('@expo/mcp-tunnel');\n\n    const logger = {\n      ...Log,\n      debug(...message: any[]): void {\n        debug(...message);\n      },\n      info(...message: any[]): void {\n        Log.log(...message);\n      },\n    };\n    const server: McpServerProxy = new TunnelMcpServerProxy(mcpServerUrl, {\n      logger,\n      wsHeaders: createAuthHeaders(),\n    });\n    addMcpCapabilities(server, projectRoot);\n\n    return server;\n  } catch (error: unknown) {\n    debug(`Error creating MCP tunnel: ${error}`);\n  }\n  return null;\n}\n\nfunction createAuthHeaders(): Record<string, string> {\n  const token = getAccessToken();\n  if (token) {\n    return {\n      authorization: `Bearer ${token}`,\n    };\n  }\n  const sessionSecret = getSession()?.sessionSecret;\n  if (sessionSecret) {\n    return {\n      'expo-session': sessionSecret,\n    };\n  }\n  return {};\n}\n"],"names":["maybeCreateMCPServerAsync","importESM","require","debug","projectRoot","mcpServer","env","EXPO_UNSTABLE_MCP_SERVER","mcpPackagePath","resolveFrom","silent","Log","error","normalizedServer","test","mcpServerUrlObject","URL","scheme","protocol","mcpServerUrl","host","addMcpCapabilities","TunnelMcpServerProxy","logger","message","info","log","server","wsHeaders","createAuthHeaders","getSession","token","getAccessToken","authorization","sessionSecret"],"mappings":";;;;+BAiBsBA;;;eAAAA;;;;gEAbE;;;;;;8BAEmB;qBACvB;qBACA;;;;;;AAEpB,MAAMC,YAAYC,QAAQ;AAE1B,MAAMC,QAAQD,QAAQ,SAAS;AAKxB,eAAeF,0BACpBI,WAAmB;IAEnB,MAAMC,YAAYC,QAAG,CAACC,wBAAwB;IAC9C,IAAI,CAACF,WAAW;QACd,OAAO;IACT;IACA,MAAMG,iBAAiBC,sBAAW,CAACC,MAAM,CAACN,aAAa;IACvD,IAAI,CAACI,gBAAgB;QACnBG,QAAG,CAACC,KAAK,CACP;QAEF,OAAO;IACT;IAEA,MAAMC,mBAAmB,kCAAkCC,IAAI,CAACT,aAC5DA,YACA,CAAC,MAAM,EAAEA,WAAW;IACxB,MAAMU,qBAAqB,IAAIC,IAAIH;IACnC,MAAMI,SAASF,mBAAmBG,QAAQ,IAAI;IAC9C,MAAMC,eAAe,GAAGF,OAAO,EAAE,EAAEF,mBAAmBK,IAAI,EAAE;IAC5DjB,MAAM,CAAC,kCAAkC,EAAEgB,cAAc;IAEzD,IAAI;QACF,MAAM,EAAEE,kBAAkB,EAAE,GAAG,MAAMpB,UAElCO;QACH,MAAM,EAAEc,oBAAoB,EAAE,GAAG,MAAMrB,UAEpC;QAEH,MAAMsB,SAAS;YACb,GAAGZ,QAAG;YACNR,OAAM,GAAGqB,OAAc;gBACrBrB,SAASqB;YACX;YACAC,MAAK,GAAGD,OAAc;gBACpBb,QAAG,CAACe,GAAG,IAAIF;YACb;QACF;QACA,MAAMG,SAAyB,IAAIL,qBAAqBH,cAAc;YACpEI;YACAK,WAAWC;QACb;QACAR,mBAAmBM,QAAQvB;QAE3B,OAAOuB;IACT,EAAE,OAAOf,OAAgB;QACvBT,MAAM,CAAC,2BAA2B,EAAES,OAAO;IAC7C;IACA,OAAO;AACT;AAEA,SAASiB;QAOeC;IANtB,MAAMC,QAAQC,IAAAA,4BAAc;IAC5B,IAAID,OAAO;QACT,OAAO;YACLE,eAAe,CAAC,OAAO,EAAEF,OAAO;QAClC;IACF;IACA,MAAMG,iBAAgBJ,cAAAA,IAAAA,wBAAU,wBAAVA,YAAcI,aAAa;IACjD,IAAIA,eAAe;QACjB,OAAO;YACL,gBAAgBA;QAClB;IACF;IACA,OAAO,CAAC;AACV"}